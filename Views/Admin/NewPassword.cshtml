@model VisaApplicationSystem.Models.Password

@{
    ViewBag.Title = "NewPassword";
    Layout = "~/Views/Shared/_LayoutPageAdmin.cshtml";
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>@ViewBag.Title</title>
    <script src="~/Scripts/CustomScript/SignUp.js"></script>
    <link href="~/Content/CustomCSS/TableView.css" rel="stylesheet" />
    <script type="text/javascript">
        function validateField(field) {
            var value = field.value.trim();
            var errorSpan = field.parentElement.querySelector(".text-danger");
            if (value === '') {
                errorSpan.innerText = 'This cannot be empty.';
                errorSpan.style.color = 'red';
            } else {
                errorSpan.innerText = '';
            }
        }
        function validatePassword(input) {
            var passwordInput = input.value;
            var passwordError = document.getElementById("passwordError");

            // Define your password criteria here
            var minLength = 8;
            var hasUppercase = /[A-Z]/.test(passwordInput);
            var hasLowercase = /[a-z]/.test(passwordInput);
            var hasNumber = /\d/.test(passwordInput);
            var hasSpecialCharacter = /[!@@#$%^&*()_+{}\[\]:;<>,.?~\\|]/.test(passwordInput);

            if (passwordInput.length < minLength ||
                !hasUppercase || !hasLowercase || !hasNumber || !hasSpecialCharacter) {
                passwordError.innerHTML = "Password must be at least 8 characters long and contain at least one uppercase letter, one lowercase letter, one number, and one special character.";
            } else {
                passwordError.innerHTML = ""; // Clear any previous error message.
            }
        }

    </script>

</head>
<style>
    input[type=password],
    select {
        width: 30%;
        padding: 12px 20px;
        margin: 8px 0;
        display: inline-block;
        border: 1px solid #ccc;
        border-radius: 4px;
        box-sizing: border-box;
    }
</style>
<body>
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

    <div class="form-horizontal">

        <h2>Change password</h2>
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            <div class="col-md-10">
                @Html.EditorFor(model => model.newPassword, new { htmlAttributes = new { @class = "form-control", @onblur = "validateField(this);", placeholder = "New password", type = "password" } })
                <br>
                @Html.ValidationMessageFor(model => model.newPassword, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-10">
                @Html.EditorFor(model => model.conformPassword, new { htmlAttributes = new { @class = "form-control", @onblur = "validateField(this);", placeholder = "Conform password", type = "password" } })
                <br>
                @Html.ValidationMessageFor(model => model.conformPassword, "", new { @class = "text-danger" })
            </div>
        </div>
        <br>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Conform" class="btn btn-pri" />
            </div>
        </div>
    </div>
    }
</body>
</html>
