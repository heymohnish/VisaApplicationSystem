@model VisaApplicationSystem.Models.Registration

@{
    ViewBag.Title = "Profile";
    Layout = "~/Views/Shared/_LayoutPageVCO.cshtml";
}


<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>@ViewBag.Title</title>
    <link href="~/Content/CustomCSS/TableView.css" rel="stylesheet" />
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/jquery.validation/1.19.3/jquery.validate.min.js"></script>
    <script src="~/Scripts/CustomScript/Registration.js"></script>
    <link href="~/Content/CustomCSS/Registration.css" rel="stylesheet" />
</head>
<body>
    <h2>Update profile</h2>
    @if (Model != null && Model.photo != null && Model.photo.Length > 0)
    {
        <img src="data:image/jpeg;base64,@Convert.ToBase64String(Model.photo)" alt="Image" width="200" height="200" />
        <br>
    }
    else
    {
        <p>Image not found</p>
    }
    <br />

    @using (Html.BeginForm("UploadPicture", "VCO", FormMethod.Post, new { enctype = "multipart/form-data" }))
    {


        @Html.HiddenFor(model => model.registrationID)
        <input class="form-control form-control" type="file" name="file" />
        <input class="form-control form-control" type="submit" value="Upload" />
        <br>
        <br>
    }
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">

            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="form-group">
                @Html.LabelFor(model => model.firstName, "First Name", htmlAttributes: new { @class = "control-label col-md-2" })<div class="col-md-10">
                    @Html.EditorFor(model => model.firstName, new { htmlAttributes = new { @class = "form-control" } })@Html.ValidationMessageFor(model => model.firstName, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.lastName, "Last Name", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.lastName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.lastName, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.age, "Age", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.age, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.age, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.phone, "Phone", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.phone, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.phone, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.email, "Email", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.email, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })

                    @Html.ValidationMessageFor(model => model.email, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.gender, "Gender", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <div class="form-check form-check-inline">
                        @Html.RadioButtonFor(model => model.gender, "Male", new { @class = "form-check-input" })
                        <label class="form-check-label" for="gender_Male">Male</label>
                    </div>
                    <div class="form-check form-check-inline">
                        @Html.RadioButtonFor(model => model.gender, "Female", new { @class = "form-check-input" })
                        <label class="form-check-label" for="gender_Female">Female</label>
                    </div>
                    <div class="form-check form-check-inline">
                        @Html.RadioButtonFor(model => model.gender, "Other", new { @class = "form-check-input" })
                        <label class="form-check-label" for="gender_Other">Other</label>
                    </div>
                    @Html.ValidationMessageFor(model => model.gender, "", new { @class = "text-danger" })
                </div>
            </div>
            <br>
            <br>
            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Create" class="btn btn-pri" />
                </div>
            </div>
            <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
            <script>
            $(document).ready(function () {
            var stateDropdown = $("#countryDropdown");
            $.ajax({
                url: "@Url.Action("GetCountry", "Form")", type: "GET",
                dataType: "json",
                success: function (data) {
                    // Populate the dropdown with the fetched states
                    $.each(data, function (index, item) {
                        stateDropdown.append($('<option>', {
                            value: item,
                            text: item
                        }));
                    });
                }
            });
        });
        $(document).ready(function () {
            var stateDropdown = $("#stateDropdown");
            var countryDropdown = $("#countryDropdown");
            countryDropdown.change(function () {
                var selectedCountry = countryDropdown.val();
                $.ajax({
                    url: "@Url.Action("GetStates", "Form")",
                    type: "GET",
                    dataType: "json",
                    data: { country: selectedCountry },
                    success: function (data) {
                        stateDropdown.empty();
                        stateDropdown.append($('<option>', {
                            value: "",
                            text: "Select State"
                        }));
                        $.each(data, function (index, item) {
                            stateDropdown.append($('<option>', {
                                value: item,
                                text: item
                            }));
                        });
                    }
                });
            });
        });
        $(document).ready(function () {
            var cityDropdown = $("#cityDropdown");
            var stateDropdown = $("#stateDropdown");
            stateDropdown.change(function () {
                var selectedState = stateDropdown.val();
                $.ajax({
                    url: "@Url.Action("GetCities", "Form")",
                    type: "GET",
                    dataType: "json",
                    data: { state: selectedState },
                    success: function (data) {
                        // Clear existing options in the city dropdown
                        cityDropdown.empty();
                        cityDropdown.append($('<option>', {
                            value: "",
                            text: "Select City"
                        }));
                        // Populate the dropdown with the fetched cities
                        $.each(data, function (index, item) {
                            cityDropdown.append($('<option>', {
                                value: item,
                                text: item
                            }));
                        });
                    }
                });
            });
        });
        $(document).ready(function () {
        var userNameInput = $("#usernameInput"); // Corrected the ID
        var userNameValidationMessage = $("#usernameError"); // Corrected the ID

            userNameInput.on('keyup', function () { // Changed 'keyup' to 'focusout'
            var userName = userNameInput.val();
            if (userName !== "") {
                $.ajax({
                    url: "@Url.Action("CheckUserNameExists", "Form")",
                    type: "POST",
                    data: { userName: userName },
                    success: function (result) {
                        if (result) {
                            userNameValidationMessage.text("Username already exists.");
                        } else {
                            userNameValidationMessage.text("");
                        }
                    }
                });
            }
        });
    });
            </script>
        </div>
    }
</body>
</html>