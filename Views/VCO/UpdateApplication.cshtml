@model VisaApplicationSystem.Models.ApplicationPayload

@{
    ViewBag.Title = "UpdateApplication";
    Layout = "~/Views/Shared/_LayoutPageVCO.cshtml";
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>@ViewBag.Title</title>

    <link href="~/Content/CustomCSS/TableView.css" rel="stylesheet" />
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script type="text/javascript">
        function validateField(field) {
            var value = field.value.trim();
            var errorSpan = field.parentElement.querySelector(".text-danger");
            if (value === '') {
                errorSpan.innerText = 'This cannot be empty.';
            } else {
                errorSpan.innerText = '';
            }
        }
        $(document).ready(function () {
            // Handle checkbox selection
            $('.status-checkbox').on('change', function () {
                if ($(this).is(':checked')) {
                    // Uncheck all other checkboxes
                    $('.status-checkbox').not(this).prop('checked', false);
                }
            });
        });
    </script>
</head>
<style>
    .text-danger {
        color: #dc3545;
        font-size: 0.875rem;
    }

    .custom-moved {
        margin-left: 15cm;
    }

    .form-outline {
        position: center;
    }

        .form-outline input,
        .form-outline select,
        .form-outline textarea {
            border: 3px solid #ced4da;
            border-radius: 0.25rem;
            padding: 0.375rem 0.75rem;
            font-size: 1rem;
            width: 100%;
        }

    input[type=text],
    select {
        width: 20%;
        padding: 12px 20px;
        margin: 8px 0;
        display: inline-block;
        border: 1px solid #ccc;
        border-radius: 10px;
        box-sizing: border-box;
    }
    input[type=date],
    select {
        width: 100%;
        padding: 12px 20px;
        margin: 8px 0;
        display: inline-block;
        border: 1px solid #ccc;
        border-radius: 4px;
        box-sizing: border-box;
    }


    input[type=number],
    select {
        width: 20%;
        padding: 12px 20px;
        margin: 8px 0;
        display: inline-block;
        border: 1px solid #ccc;
        border-radius: 10px;
        box-sizing: border-box;
    }
    .control-label {
        margin-right: 55px; /* Adjust the value as needed */
    }
    .control-label1 {
        margin-right: 114px; /* Adjust the value as needed */
    }
    .control-label2 {
        margin-right: 30px; /* Adjust the value as needed */
    }
</style>
<body>

</body>
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">
    <h1>Application form</h1>
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <div class="form-group">
        <div class="row">
            <div class="col-md-2">
            </div>
            <div class="col-md-10">
                @Html.LabelFor(model => model.applicationID, "Application ID :", htmlAttributes: new { @class = "control-label" })&nbsp;&nbsp;&nbsp;
                @Html.EditorFor(model => model.applicationID, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.applicationID, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>
    <div class="form-group">
        <div class="row">
            <div class="col-md-2">
            </div>
            <div class="col-md-10">
                @Html.LabelFor(model => model.visaName, "Visa name :", htmlAttributes: new { @class = "control-label" })&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                @Html.EditorFor(model => model.visaName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.visaName, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>


    <div class="form-group">
        <div class="col-md-10">
            @Html.LabelFor(model => model.visaTitle, "Visa title :", htmlAttributes: new { @class = "control-label" })&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

            @Html.EditorFor(model => model.visaTitle, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.visaTitle, "", new { @class = "text-danger" })
        </div>
    </div>


    <div class="form-group">
        <div>
            @Html.LabelFor(model => model.visaDiscription, "Visa Description :", htmlAttributes: new { @class = "control-label" })
            @Html.EditorFor(model => model.visaDiscription, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.visaDiscription, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-10">
            @Html.LabelFor(model => model.visaId, "Visa ID :", htmlAttributes: new { @class = "control-label1" })
            @Html.EditorFor(model => model.visaId, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.visaId, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-10">
            @Html.LabelFor(model => model.registrationID, "Registration ID :", htmlAttributes: new { @class = "control-label" })&nbsp;&nbsp;&nbsp;
            @Html.EditorFor(model => model.registrationID, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.registrationID, "", new { @class = "text-danger" })
        </div>
    </div>
    @*<div class="form-group">
            @Html.LabelFor(model => model.isPersonalInformation, htmlAttributes: new { @class = "control-label" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.isPersonalInformation)
                    @Html.ValidationMessageFor(model => model.isPersonalInformation, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>*@
    @if (Model.isPersonalInformation)
    {
        <p><h2>Personal Information @Html.EditorFor(model => model.isPersonalInformation)</h2></p>
        <div class="form-group">
            <div class="col-md-10">
                @Html.LabelFor(model => model.fullName, "Fullname : ", htmlAttributes: new { @class = "control-label2 col-md-2" })
                @Html.LabelFor(model => model.fullName, @Model.fullName, htmlAttributes: new { @class = "control-label2 col-md-2" })
                <br>
            </div>
        </div>
        <br>
        <div class="form-group">
            <div class="col-md-10">
                @Html.LabelFor(model => model.dateOfBirth, "Date of birth : ", htmlAttributes: new { @class = "control-label2 col-md-2" })
                @Html.LabelFor(model => model.dateOfBirth, @Model.dateOfBirth.ToString(), htmlAttributes: new { @class = "control-label2 col-md-2" })
                <br>
            </div>
        </div>
        <br>
        <div class="form-group">
            <div class="col-md-10">
                @Html.LabelFor(model => model.nationality, "Nationality :", htmlAttributes: new { @class = "control-label2 col-md-2" })
                @Html.LabelFor(model => model.nationality, @Model.nationality, htmlAttributes: new { @class = "control-label2 col-md-2" })
                <br>
            </div>
        </div>
        <br>
        <div class="form-group">
            <div class="col-md-10">
                @Html.LabelFor(model => model.gender, "Gender : ", htmlAttributes: new { @class = "control-label2 col-md-2" })
                @Html.LabelFor(model => model.gender, @Model.gender, htmlAttributes: new { @class = "control-label2 col-md-2" })
                <br>
            </div>
        </div>
        <br>
        <div class="form-group">
            <div class="col-md-10">
                @Html.LabelFor(model => model.passportNumber, "Passport No : ", htmlAttributes: new { @class = "control-label2 col-md-2" })
                @Html.LabelFor(model => model.passportNumber, @Model.passportNumber, htmlAttributes: new { @class = "control-label2 col-md-2" })
                <br>
            </div>
        </div>
        <br>
        <div class="form-group">
            <div class="col-md-10">
                @Html.LabelFor(model => model.passportExpiryDate, "Passport expiry date : ", htmlAttributes: new { @class = "control-label2 col-md-2" })
                @Html.LabelFor(model => model.passportExpiryDate, @Model.passportExpiryDate.ToString(), htmlAttributes: new { @class = "control-label2 col-md-2" })
                <br>
            </div>
        </div>
        <br>
        <div class="form-group">
            <div class="col-md-10">
                @Html.LabelFor(model => model.phoneNumber, "Phone number : ", htmlAttributes: new { @class = "control-label2 col-md-2" })
                @Html.LabelFor(model => model.phoneNumber, @Model.phoneNumber, htmlAttributes: new { @class = "control-label2 col-md-2" })
                <br>
            </div>
        </div>
        <br>
        <div class="form-group">
            <div class="col-md-10">
                @Html.LabelFor(model => model.email, "Email : ", htmlAttributes: new { @class = "control-label2 col-md-2" })
                @Html.LabelFor(model => model.email, @Model.email, htmlAttributes: new { @class = "control-label2 col-md-2" })
                <br>
            </div>
        </div>
        <br>
        <div class="form-group">
            <div class="col-md-10">
                @Html.LabelFor(model => model.residentialAddress, "Applicant address : ", htmlAttributes: new { @class = "control-label2 col-md-2" })
                @Html.LabelFor(model => model.residentialAddress, @Model.residentialAddress, htmlAttributes: new { @class = "control-label2 col-md-2" })
                <br>
            </div>
        </div>
        <br>
        <div class="form-group">
            <div class="col-md-10">
                @Html.LabelFor(model => model.purposeOfTravel, "Purpose of travel : ", htmlAttributes: new { @class = "control-label2 col-md-2" })
                @Html.LabelFor(model => model.purposeOfTravel, @Model.purposeOfTravel, htmlAttributes: new { @class = "control-label2 col-md-2" })
                <br>
            </div>
        </div>
        <br>
        <div class="form-group">
            <div class="col-md-10">
                @Html.LabelFor(model => model.departureDate, "Departure date : ", htmlAttributes: new { @class = "control-label2 col-md-2" })
                @Html.LabelFor(model => model.departureDate, @Model.departureDate.ToString(), htmlAttributes: new { @class = "control-label2 col-md-2" })
                <br>
            </div>
        </div>
        <br>
        <div class="form-group">
            <div class="col-md-10">
                @Html.LabelFor(model => model.returnDate, "Return date :", htmlAttributes: new { @class = "control-label2 col-md-2" })
                @Html.LabelFor(model => model.returnDate, @Model.returnDate.ToString(), htmlAttributes: new { @class = "control-label2 col-md-2" })
                <br>
            </div>
        </div>
        <br>
    }
    <p><h2>Supportive Documents</h2></p>

    @if (Model.isPhoto)
    {
        <div class="form-group">
            @Html.LabelFor(model => model.isPhoto, "Photo", htmlAttributes: new { @class = "control-label col-md-2" })@Html.EditorFor(model => model.isPhoto)
        </div>
        <br>
        if (Model != null && Model.photo != null && Model.photo.Length > 0)
        {
            <img src="data:image/jpeg;base64,@Convert.ToBase64String(Model.photo)" alt="Image" width="200" height="200" />
        }
        else
        {
            <p>Image not found</p>
        }
    }
    @if (Model.isPAN)
    {
        <div class="form-group">
            @Html.LabelFor(model => model.isPAN, "PAN   ", htmlAttributes: new { @class = "control-label" })@Html.EditorFor(model => model.isPAN)
        </div>
        <br>
        if (Model != null && Model.PAN != null && Model.PAN.Length > 0)
        {
            <img src="data:image/jpeg;base64,@Convert.ToBase64String(Model.PAN)" alt="Image" width="200" height="200" />
        }
        else
        {
            <p>Image not found</p>
        }
    }
    @if (Model.isAadhar)
    {
        <div class="form-group">
            @Html.LabelFor(model => model.isAadhar, "Aadhar", htmlAttributes: new { @class = "control-label" })@Html.EditorFor(model => model.isAadhar)
        </div>
        <br>
        if (Model != null && Model.aadhar != null && Model.aadhar.Length > 0)
        {
            <img src="data:image/jpeg;base64,@Convert.ToBase64String(Model.aadhar)" alt="Image" width="200" height="200" />
        }
        else
        {
            <p>Image not found</p>
        }
    }
    @if (Model.isGovenmentProof)
    {
        <div class="form-group">
            @Html.LabelFor(model => model.isGovenmentProof, "Government Proof ", htmlAttributes: new { @class = "control-label" })@Html.EditorFor(model => model.isGovenmentProof)
        </div>
        <br>
        if (Model != null && Model.govenmentProof != null && Model.govenmentProof.Length > 0)
        {
            <img src="data:image/jpeg;base64,@Convert.ToBase64String(Model.govenmentProof)" alt="Image" width="200" height="200" />
        }
        else
        {
            <p>Image not found</p>
        }
    }
    @if (Model.isPassport)
    {
        <div class="form-group">
            @Html.LabelFor(model => model.isPassport, "Passport", htmlAttributes: new { @class = "control-label" })@Html.EditorFor(model => model.isPassport)
        </div>
        <br>

        if (Model != null && Model.passport != null && Model.passport.Length > 0)
        {
            <img src="data:image/jpeg;base64,@Convert.ToBase64String(Model.passport)" alt="Image" width="200" height="200" />
        }
        else
        {
            <p>Image not found</p>
        }
    }
    @if (Model.isEmployeeProof)
    {
        <div class="form-group">
            @Html.LabelFor(model => model.isEmployeeProof, "Employee proof", htmlAttributes: new { @class = "control-label" })@Html.EditorFor(model => model.isEmployeeProof)
        </div>
        <br>

        if (Model != null && Model.employeeProof != null && Model.employeeProof.Length > 0)
        {
            <img src="data:image/jpeg;base64,@Convert.ToBase64String(Model.employeeProof)" alt="Image" width="200" height="200" />
        }
        else
        {
            <p>Image not found</p>
        }
    }
    @if (Model.isEducationProof)
    {
        <div class="form-group">
            @Html.LabelFor(model => model.isEducationProof, "Education proof   ", htmlAttributes: new { @class = "control-label" })@Html.EditorFor(model => model.isEducationProof)
        </div>
        <br>
        if (Model != null && Model.educationProof != null && Model.educationProof.Length > 0)
        {
            <img src="data:image/jpeg;base64,@Convert.ToBase64String(Model.educationProof)" alt="Image" width="200" height="200" />
        }
        else
        {
            <p>Image not found</p>
        }
    }
    @if (Model.isBankProof)
    {
        <div class="form-group">
            @Html.LabelFor(model => model.isBankProof, "Bank proof   ", htmlAttributes: new { @class = "control-label" })@Html.EditorFor(model => model.isBankProof)
        </div>
        <br>
        if (Model != null && Model.bankProof != null && Model.bankProof.Length > 0)
        {
            <img src="data:image/jpeg;base64,@Convert.ToBase64String(Model.bankProof)" alt="Image" width="200" height="200" />
        }
        else
        {
            <p>Image not found</p>
        }
    }
    @if (Model.isToeflCertification)
    {
        <div class="form-group">
            @Html.LabelFor(model => model.isToeflCertification, "TOEFL Certification   ", htmlAttributes: new { @class = "control-label" })@Html.EditorFor(model => model.isToeflCertification)
        </div>
        <br>
        if (Model != null && Model.toeflCertification != null && Model.toeflCertification.Length > 0)
        {
            <img src="data:image/jpeg;base64,@Convert.ToBase64String(Model.toeflCertification)" alt="Image" width="200" height="200" />
        }
        else
        {
            <p>Image not found</p>
        }
    }
    @if (Model.isVisitorProof)
    {
        <div class="form-group">
            @Html.LabelFor(model => model.isVisitorProof, "Visitor proof", htmlAttributes: new { @class = "control-label" })@Html.EditorFor(model => model.isVisitorProof)
        </div>
        <br>

        if (Model != null && Model.visitorProof != null && Model.visitorProof.Length > 0)
        {
            <img src="data:image/jpeg;base64,@Convert.ToBase64String(Model.visitorProof)" alt="Image" width="200" height="200" />
        }
        else
        {
            <p>Image not found</p>
        }
    }
    <br>
    <p><h2>Update Status</h2></p>
    <div class="checkbox">
        <label>
            <input type="checkbox" class="status-checkbox" id="approvedCheckbox" name="status" value="Approved"> Approved
        </label>
    </div>
    <div class="checkbox">
        <label>
            <input type="checkbox" class="status-checkbox" id="rejectedCheckbox" name="status" value="Rejected"> Rejected
        </label>
    </div>
    <div class="checkbox">
        <label>
            <input type="checkbox" class="status-checkbox" id="submittedCheckbox" name="status" value="Submitted"> Submitted
        </label>
    </div>
    <p><h2>Remark</h2></p>
    <div class="form-group">
        <div class="col-md-10">
        @Html.LabelFor(model => model.messageUser, "Remark",htmlAttributes: new { @class = "control-label col-md-2" })
            @Html.EditorFor(model => model.messageUser, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.messageUser, "", new { @class = "text-danger" })
        </div>
    </div>
    <br />
    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Update" class="btn btn-pri" />
        </div>
    </div>

</div>
}

